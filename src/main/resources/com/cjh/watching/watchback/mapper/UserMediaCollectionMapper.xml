<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cjh.watching.watchback.mapper.UserMediaCollectionMapper">
    <select id="getByRecent" resultType="com.cjh.watching.watchback.dto.MovieDto">
        SELECT
            umc.tmdb_id,
            umc.title,
            umc.original_language,
            umc.overview,
            umc.vote_average,
            umc.vote_count,
            umc.popularity,
            umc.poster_path,
            umc.backdrop_path,
            mc.created_time,
            umc.media_type,
            umc.genre_ids
        FROM user_media_collection mc
                 LEFT JOIN (
            SELECT
                movie_id as media_id,
                tmdb_id,
                title as title,
                original_language,
                overview,
                vote_average,
                vote_count,
                popularity,
                poster_path,
                backdrop_path,
                1 as media_type,
                genre_ids
            FROM movies
            UNION
            SELECT
                show_id as media_id,
                tmdb_id,
                name as title,
                original_language,
                overview,
                vote_average,
                vote_count,
                popularity,
                poster_path,
                backdrop_path,
                2 as media_type,
                genre_ids
            FROM tv_shows
        ) umc ON umc.media_id = mc.media_id AND umc.media_type = mc.media_type
        WHERE mc.user_id = #{userId}
          AND mc.media_type IN (1,2)
          AND mc.created_time >= DATE_SUB(NOW(), INTERVAL 7 DAY)
        order by mc.created_time desc
    limit 10
    </select>

    <select id="getByAllData" resultType="com.cjh.watching.watchback.dto.MovieDto">
        SELECT
            umc.tmdb_id,
            umc.title,
            umc.original_language,
            umc.overview,
            umc.vote_average,
            umc.vote_count,
            umc.popularity,
            umc.poster_path,
            umc.backdrop_path,
            mc.created_time,
            umc.media_type,
            umc.genre_ids
        FROM user_media_collection mc
                 LEFT JOIN (
            SELECT
                movie_id as media_id,
                tmdb_id,
                title as title,
                original_language,
                overview,
                vote_average,
                vote_count,
                popularity,
                poster_path,
                backdrop_path,
                1 as media_type,
                genre_ids
            FROM movies
            UNION
            SELECT
                show_id as media_id,
                tmdb_id,
                name as title,
                original_language,
                overview,
                vote_average,
                vote_count,
                popularity,
                poster_path,
                backdrop_path,
                2 as media_type,
                genre_ids
            FROM tv_shows
        ) umc ON umc.media_id = mc.media_id AND umc.media_type = mc.media_type
        <where>
            mc.user_id = #{userId} and mc.status=#{query.status}
            AND mc.media_type IN (1,2)
            <if test="query.query!=null and query.query !=''">
                and  umc.title LIKE CONCAT('%',#{query.query},'%')
            </if>
        </where>
        order by mc.created_time desc
    </select>

    <select id="getUserStatistics" resultType="com.cjh.watching.watchback.dto.MovieQuery">
        WITH user_media AS (
            SELECT
                mc.media_id,
                mc.media_type,
                mc.created_time,
                umc.vote_average,
                umc.genre_ids
            FROM user_media_collection mc
                     INNER JOIN (
                SELECT movie_id as media_id, 1 as media_type, vote_average, genre_ids FROM movies
                UNION ALL
                SELECT show_id as media_id, 2 as media_type, vote_average, genre_ids FROM tv_shows
            ) umc ON umc.media_id = mc.media_id AND umc.media_type = mc.media_type
            WHERE mc.user_id = #{userId}
              AND mc.status = #{status}
              AND mc.media_type IN (1, 2)
        ),
             genre_counts AS (
                 SELECT
                     JSON_UNQUOTE(JSON_EXTRACT(um.genre_ids, CONCAT('$[', n.n, ']'))) as genre_id,
                     COUNT(*) as count
        FROM user_media um
            CROSS JOIN (SELECT 0 as n UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) n
        WHERE JSON_LENGTH(um.genre_ids) > n.n
        GROUP BY JSON_UNQUOTE(JSON_EXTRACT(um.genre_ids, CONCAT('$[', n.n, ']')))
            )
        SELECT
            COUNT(*) as totalWatched,
            COUNT(CASE WHEN created_time >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) THEN 1 END) as monthlyWatched,
            ROUND(AVG(vote_average), 1) as averageRating,
            (
                SELECT genre_id
                FROM genre_counts
                ORDER BY count DESC
                LIMIT 1
            ) as favoriteGenre
        FROM user_media
    </select>
</mapper>
